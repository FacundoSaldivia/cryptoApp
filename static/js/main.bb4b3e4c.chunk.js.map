{"version":3,"sources":["Components/NavBar/Navbar.jsx","Components/Card/Chart/Chart.jsx","Components/Card/Card.jsx","App.js","index.js"],"names":["Navbar","input","setInput","setId","id","getPrices","getCoinData","onSubmit","e","preventDefault","toLowerCase","className","type","value","placeholder","onChange","target","icon","faSearch","Chart","coinArrPrice","coinChartDate","useState","data","setData","useEffect","labels","datasets","lineTension","label","length","backgroundColor","borderWidth","width","Card","coinName","currentPrice","App","setCoinArrPrice","setCoinChartDate","setCoinName","setCurrentPrice","setDate","date","fecha","Date","month","getUTCMonth","day","getUTCDate","url","a","fetch","response","json","ok","saveData","prices","forEach","dato","prev","console","log","alert","name","market_data","current_price","usd","getHistoryPrices","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb4b3e4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Navbar({ input, setInput, id, setId, getPrices, getCoinData }) {\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setId(input.toLowerCase());\r\n    getPrices(input.toLowerCase());\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"search\">\r\n          <input\r\n            className=\"navbar\"\r\n            type=\"text\"\r\n            value={input}\r\n            placeholder=\"Bitcoin, Ethereum\"\r\n            onChange={(e) => setInput(e.target.value)}\r\n          />\r\n          <button type=\"submit\" className=\"searchButton\">\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nfunction Chart({ coinArrPrice, coinChartDate }) {\r\n  const [data, setData] = useState({});\r\n\r\n  const chart = () => {\r\n    setData({\r\n      labels: coinChartDate,\r\n      datasets: [\r\n        {\r\n          lineTension: 0,\r\n          label: `PRECIO EN LOS ULTIMOS ${coinArrPrice.length} DIAS`,\r\n          data: coinArrPrice,\r\n          backgroundColor: [\"rgba(233, 69, 96, .1)\"],\r\n          borderWidth: 3,\r\n          width: \"1200px\",\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    chart();\r\n  }, [coinArrPrice]);\r\n  return (\r\n    <>\r\n      <Line data={data}></Line>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\nimport \"./card.css\";\r\n\r\nfunction Card({ coinArrPrice, coinChartDate, coinName, currentPrice }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div>\r\n        <h1 className=\"coin-name\">{`${coinName}: $${currentPrice}`}</h1>\r\n      </div>\r\n      <h1></h1>\r\n\r\n      <Chart coinChartDate={coinChartDate} coinArrPrice={coinArrPrice}></Chart>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Components/NavBar/Navbar\";\nimport Card from \"./Components/Card/Card\";\nimport \"./style.css\";\n\nfunction App() {\n  const [id, setId] = useState();\n  const [coinArrPrice, setCoinArrPrice] = useState([]);\n  const [coinChartDate, setCoinChartDate] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [coinName, setCoinName] = useState(\"\");\n  const [currentPrice, setCurrentPrice] = useState(0);\n\n  const setDate = (date) => {\n    let fecha = new Date(date);\n    let month = fecha.getUTCMonth() + 1;\n    let day = fecha.getUTCDate();\n    let newDate = `${day}/${month}`;\n    return newDate;\n  };\n\n  const getPrices = (id) => {\n    getCoinData(`https://api.coingecko.com/api/v3/coins/${id}`);\n    getHistoryPrices(\n      `https://api.coingecko.com/api/v3/coins/${id}/market_chart?vs_currency=usd&days=30&interval=daily`\n    );\n  };\n\n  async function getHistoryPrices(url) {\n    let response = await fetch(url);\n    let data = await response.json();\n    if (!response.ok) {\n    } else {\n      saveData(data.prices);\n    }\n  }\n  const saveData = (data) => {\n    setCoinChartDate([]);\n    setCoinArrPrice([]);\n    data.forEach((dato) => {\n      setCoinArrPrice((prev) => [...prev, dato[1]]);\n      setCoinChartDate((prev) => [...prev, setDate(dato[0])]);\n    });\n  };\n\n  async function getCoinData(url) {\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(response);\n    if (input.length === 0) {\n      alert(\"Escribe que moneda deseas buscar (Bitcoin, Ethereum)\");\n    } else {\n      if (!response.ok) {\n        alert(\"moneda invalida\");\n        setCoinName([]);\n        setCurrentPrice([]);\n      } else {\n        setCoinName(data.name);\n        setCurrentPrice(data.market_data.current_price.usd);\n      }\n    }\n  }\n\n  return (\n    <>\n      <Navbar\n        className=\"navbar\"\n        id={id}\n        setId={setId}\n        input={input}\n        setInput={setInput}\n        getPrices={getPrices}\n        getCoinData={getCoinData}\n      ></Navbar>\n      <Card\n        coinName={coinName}\n        currentPrice={currentPrice}\n        coinArrPrice={coinArrPrice}\n        coinChartDate={coinChartDate}\n      ></Card>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}